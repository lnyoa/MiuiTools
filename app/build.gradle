import com.android.builder.core.BuilderConstants


apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            keyAlias 'package'
            storeFile file('../keys/package.jks')
            keyPassword 'xxx'
            storePassword 'xxx'
        }

    }
    compileSdkVersion 21
    buildToolsVersion "24.0.2"
    defaultConfig {
        applicationId "bs.lansys.miuitools"
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
        versionName '1.0.0.1'
        signingConfig signingConfigs.release
    }
    // Only build the release variant
    variantFilter { variant ->
        if (variant.buildType.name != BuilderConstants.RELEASE) {
            variant.ignore = true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            zipAlignEnabled true
        }
    }
    productFlavors {
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                def fileName
                if (variant.buildType.name.equals('release')) {
                    fileName = "MiuiTools.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "MiuiTools-debug.apk"
                }
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
    sourceSets { main { res.srcDirs = ['src/main/res', 'src/main/res/xml'] } }
}



dependencies {
    provided files('../jarlibs/miui_framework.jar')
    provided files('../jarlibs/XposedBridge-API-83.jar')
    compile files('../jarlibs/miuiapp.jar')
}

task fixIml {
    ext.imlFile = projectDir.absolutePath + '/' + project.name + '.iml'
    inputs.file imlFile
    outputs.file imlFile

    doLast {
        if (!file(imlFile).exists())
            return

        def parse = new XmlParser().parse(imlFile)
        def moduleComponent = parse.component.find { it.@name == 'NewModuleRootManager' }

        def orderEntries = moduleComponent.orderEntry
        if (orderEntries.find { it.@type == 'library' && it.@'name' == 'miui_framework' }) {
            def miuiOrderEntryIndex = orderEntries.find {
                it.@type == 'library' && it.@'name' == 'miui_framework'
            }
            moduleComponent.remove(miuiOrderEntryIndex)
        }

        //return

        def jdkOrderEntry = orderEntries.find { it.@type == 'jdk' }
        def jdkOrderEntryIndex = moduleComponent.children().indexOf(jdkOrderEntry)

        moduleComponent.children().add(jdkOrderEntryIndex, new Node(null, 'orderEntry',
                ['type': 'library', 'name': 'miui_framework', 'level': 'project', 'exported': '']))

        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(imlFile)))
        printer.preserveWhitespace = true
        printer.print(parse)
    }
}

tasks.preBuild.dependsOn fixIml